/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package carrental;

import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

/**
 *
 * @author Syeda Urooj Fatima
 */
public class booking extends javax.swing.JFrame {
    private static SessionFactory factory; 
    private String user = "";
    /**
     * Creates new form booking
     */
    public booking() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        try {
            factory = new Configuration().configure().buildSessionFactory();
        } catch (Throwable ex) { 
            System.err.println("Failed to create sessionFactory object." + ex);
            throw new ExceptionInInitializerError(ex); 
        }
        
        listBookings();
        listConfirmedBookings();
        listPendingBookings();
        
        updateFine();
        updateBookings();
    }

    public booking(String name) {
        this();
        user = name;
        lblUser.setText("User : "+user);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblCompany = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        lblUser = new javax.swing.JLabel();
        tabBookings = new javax.swing.JTabbedPane();
        panelBookings = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBookings = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        lblDelete = new javax.swing.JLabel();
        lblBookingID = new javax.swing.JLabel();
        txtBookingID = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        lblDue = new javax.swing.JLabel();
        lblBookingID4 = new javax.swing.JLabel();
        txtBookingID4 = new javax.swing.JTextField();
        btnDue = new javax.swing.JButton();
        btnComplete = new javax.swing.JButton();
        panelConfirmedBookings = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblConfirmedBookings = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        lblDelete1 = new javax.swing.JLabel();
        lblBookingID1 = new javax.swing.JLabel();
        txtBookingID1 = new javax.swing.JTextField();
        btnDelete1 = new javax.swing.JButton();
        panelPendingBookings = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPendingBookings = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        lblDelete2 = new javax.swing.JLabel();
        lblBookingID2 = new javax.swing.JLabel();
        txtBookingID2 = new javax.swing.JTextField();
        btnDelete2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        lblConfirm = new javax.swing.JLabel();
        lblBookingID3 = new javax.swing.JLabel();
        txtBookingID3 = new javax.swing.JTextField();
        btnConfirm = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(52, 172, 224));

        lblCompany.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        lblCompany.setForeground(java.awt.Color.white);
        lblCompany.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCompany.setText("CarGo");

        btnLogout.setBackground(java.awt.Color.white);
        btnLogout.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(52, 172, 224));
        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carrental/images/logout.png"))); // NOI18N
        btnLogout.setText("Log out");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        lblUser.setBackground(java.awt.Color.white);
        lblUser.setFont(new java.awt.Font("Monotype Corsiva", 1, 15)); // NOI18N
        lblUser.setForeground(java.awt.Color.white);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(257, 257, 257)
                .addComponent(lblCompany, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout)
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblCompany, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tblBookings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblBookings);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDelete.setText("Delete Booking");

        lblBookingID.setText("Booking ID :");

        btnDelete.setBackground(new java.awt.Color(52, 172, 224));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDelete.setForeground(java.awt.Color.white);
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(lblBookingID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtBookingID))
                .addGap(116, 116, 116))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete)
                .addGap(128, 128, 128))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBookingID)
                    .addComponent(txtBookingID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblDue.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDue.setText("Due Payment");

        lblBookingID4.setText("Booking ID :");

        btnDue.setBackground(new java.awt.Color(52, 172, 224));
        btnDue.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDue.setForeground(java.awt.Color.white);
        btnDue.setText("Mark as Due");
        btnDue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDueActionPerformed(evt);
            }
        });

        btnComplete.setBackground(new java.awt.Color(52, 172, 224));
        btnComplete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnComplete.setForeground(java.awt.Color.white);
        btnComplete.setText("Mark Completed");
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(105, Short.MAX_VALUE)
                .addComponent(lblDue)
                .addGap(95, 95, 95))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(lblBookingID4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBookingID4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnDue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnComplete)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBookingID4)
                    .addComponent(txtBookingID4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDue)
                    .addComponent(btnComplete))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelBookingsLayout = new javax.swing.GroupLayout(panelBookings);
        panelBookings.setLayout(panelBookingsLayout);
        panelBookingsLayout.setHorizontalGroup(
            panelBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 948, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBookingsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
        );
        panelBookingsLayout.setVerticalGroup(
            panelBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBookingsLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        tabBookings.addTab("All Bookings", panelBookings);

        tblConfirmedBookings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblConfirmedBookings);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblDelete1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDelete1.setText("Delete Booking");

        lblBookingID1.setText("Booking ID :");

        btnDelete1.setBackground(new java.awt.Color(52, 172, 224));
        btnDelete1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDelete1.setForeground(java.awt.Color.white);
        btnDelete1.setText("Delete");
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(lblBookingID1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblDelete1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtBookingID1))
                .addGap(116, 116, 116))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete1)
                .addGap(128, 128, 128))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDelete1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBookingID1)
                    .addComponent(txtBookingID1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnDelete1)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelConfirmedBookingsLayout = new javax.swing.GroupLayout(panelConfirmedBookings);
        panelConfirmedBookings.setLayout(panelConfirmedBookingsLayout);
        panelConfirmedBookingsLayout.setHorizontalGroup(
            panelConfirmedBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 948, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelConfirmedBookingsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(330, 330, 330))
        );
        panelConfirmedBookingsLayout.setVerticalGroup(
            panelConfirmedBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConfirmedBookingsLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
        );

        tabBookings.addTab("Confirmed Bookings", panelConfirmedBookings);

        tblPendingBookings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblPendingBookings);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblDelete2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDelete2.setText("Delete Booking");

        lblBookingID2.setText("Booking ID :");

        btnDelete2.setBackground(new java.awt.Color(52, 172, 224));
        btnDelete2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDelete2.setForeground(java.awt.Color.white);
        btnDelete2.setText("Delete");
        btnDelete2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(lblBookingID2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblDelete2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtBookingID2))
                .addGap(116, 116, 116))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete2)
                .addGap(128, 128, 128))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDelete2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBookingID2)
                    .addComponent(txtBookingID2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnDelete2)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblConfirm.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblConfirm.setText("Confirm Booking");

        lblBookingID3.setText("Booking ID :");

        btnConfirm.setBackground(new java.awt.Color(52, 172, 224));
        btnConfirm.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnConfirm.setForeground(java.awt.Color.white);
        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(lblBookingID3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtBookingID3))
                .addGap(116, 116, 116))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(btnConfirm)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblConfirm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBookingID3)
                    .addComponent(txtBookingID3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnConfirm)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelPendingBookingsLayout = new javax.swing.GroupLayout(panelPendingBookings);
        panelPendingBookings.setLayout(panelPendingBookingsLayout);
        panelPendingBookingsLayout.setHorizontalGroup(
            panelPendingBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 948, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPendingBookingsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(163, 163, 163))
        );
        panelPendingBookingsLayout.setVerticalGroup(
            panelPendingBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPendingBookingsLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelPendingBookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        tabBookings.addTab("Pending Bookings", panelPendingBookings);

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Bookings");

        btnBack.setBackground(new java.awt.Color(52, 172, 224));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carrental/images/back.png"))); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTitle)
                        .addGap(451, 451, 451))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabBookings)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBack)))
                .addGap(30, 30, 30)
                .addComponent(tabBookings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        login lg = new login();
        lg.setVisible(true);
        lg.pack();
        lg.setLocationRelativeTo(null);
        lg.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        JFrame f = new JFrame();
        String id = txtBookingID.getText();
        if ( id.trim().length() == 0)
        {
            JOptionPane.showMessageDialog(f,"Improper input format","Error",JOptionPane.WARNING_MESSAGE);
        }

        else
        {
            Session session = factory.openSession();
            Transaction tx = null;
            
            try {
                tx = session.beginTransaction();
                Customerbookings cb = (Customerbookings)session.get(Customerbookings.class, Integer.valueOf(id)); 
                if(cb!=null)
                {
                    int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the record?","Delete Record",JOptionPane.YES_NO_OPTION);
                    if(p==0)
                    {
                        session.delete(cb);
                        Cars car = (Cars)session.get(Cars.class, cb.getCars().getRegistrationNo()); 
                        car.setAvailability("Available");
                        session.update(car);
                        tx.commit();
                        JOptionPane.showMessageDialog(null,"Record has been deleted successfully");
                        listBookings();
                        listConfirmedBookings();
                        listPendingBookings();
                    }
                }
                else{
                    f = new JFrame();  
                    JOptionPane.showMessageDialog(f,"No record found","Error",JOptionPane.WARNING_MESSAGE);
                }
                
            } catch (HibernateException e) {
                if (tx!=null) tx.rollback();
                e.printStackTrace();
            } finally {
                session.close();
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete1ActionPerformed
        // TODO add your handling code here:
        JFrame f = new JFrame();
        String id = txtBookingID1.getText();
        if ( id.trim().length() == 0)
        {
            JOptionPane.showMessageDialog(f,"Improper input format","Error",JOptionPane.WARNING_MESSAGE);
        }

        else
        {
            Session session = factory.openSession();
            Transaction tx = null;
            
            try {
                tx = session.beginTransaction();
                Customerbookings cb = (Customerbookings)session.get(Customerbookings.class, Integer.valueOf(id)); 
                if(cb!=null)
                {
                    int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the record?","Delete Record",JOptionPane.YES_NO_OPTION);
                    if(p==0)
                    {
                        session.delete(cb);
                        Cars car = (Cars)session.get(Cars.class, cb.getCars().getRegistrationNo()); 
                        car.setAvailability("Available");
                        session.update(car);
                        tx.commit();
                        JOptionPane.showMessageDialog(null,"Record has been deleted successfully");
                        listBookings();
                        listConfirmedBookings();
                        listPendingBookings();
                    }
                }
                else{
                    f = new JFrame();  
                    JOptionPane.showMessageDialog(f,"No record found","Error",JOptionPane.WARNING_MESSAGE);
                }
            } catch (HibernateException e) {
                if (tx!=null) tx.rollback();
                e.printStackTrace();
            } finally {
                session.close();
            }
        }
    }//GEN-LAST:event_btnDelete1ActionPerformed

    private void btnDelete2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete2ActionPerformed
        // TODO add your handling code here:
        JFrame f = new JFrame();
        String id = txtBookingID2.getText();
        if ( id.trim().length() == 0)
        {
            JOptionPane.showMessageDialog(f,"Improper input format","Error",JOptionPane.WARNING_MESSAGE);
        }

        else
        {
            Session session = factory.openSession();
            Transaction tx = null;
            
            try {
                tx = session.beginTransaction();
                Customerbookings cb = (Customerbookings)session.get(Customerbookings.class, Integer.valueOf(id)); 
                if(cb!=null)
                {
                    int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the record?","Delete Record",JOptionPane.YES_NO_OPTION);
                    if(p==0)
                    {
                        session.delete(cb);
                        Cars car = (Cars)session.get(Cars.class, cb.getCars().getRegistrationNo()); 
                        car.setAvailability("Available");
                        session.update(car);
                        tx.commit();
                        JOptionPane.showMessageDialog(null,"Record has been deleted successfully");
                        listBookings();
                        listConfirmedBookings();
                        listPendingBookings();
                    }
                }
                else{
                    f = new JFrame();  
                    JOptionPane.showMessageDialog(f,"No record found","Error",JOptionPane.WARNING_MESSAGE);
                }
                
            } catch (HibernateException e) {
                if (tx!=null) tx.rollback();
                e.printStackTrace();
            } finally {
                session.close();
            }
        }
    }//GEN-LAST:event_btnDelete2ActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        // TODO add your handling code here:
        JFrame f = new JFrame();
        String id = txtBookingID3.getText();
        if ( id.trim().length() == 0)
        {
            JOptionPane.showMessageDialog(f,"Improper input format","Error",JOptionPane.WARNING_MESSAGE);
        }

        else
        {
            Session session = factory.openSession();
            Transaction tx = null;
            
            try {
                tx = session.beginTransaction();
                Customerbookings cb = (Customerbookings)session.get(Customerbookings.class, Integer.valueOf(id)); 
                if(cb!=null)
                {
                    int p = JOptionPane.showConfirmDialog(null, "Would you like to confirm the booking?","Confirm Booking",JOptionPane.YES_NO_OPTION);
                    if(p==0)
                    {
                        cb.setStatus("Ongoing");
                        session.update(cb);
                        Cars car = (Cars)session.get(Cars.class, cb.getCars().getRegistrationNo()); 
                        car.setAvailability("Unavailable");
                        session.update(car);
                        tx.commit();
                        JOptionPane.showMessageDialog(null,"Booking has been confirmed");
                        listBookings();
                        listConfirmedBookings();
                        listPendingBookings();
                    }
                }
                else{
                    f = new JFrame();  
                    JOptionPane.showMessageDialog(f,"No record found","Error",JOptionPane.WARNING_MESSAGE);
                }
                
            } catch (HibernateException e) {
                if (tx!=null) tx.rollback();
                e.printStackTrace();
            } finally {
                session.close();
            }
        }
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        staffMenu sM = new staffMenu(user);
        sM.setVisible(true);
        sM.pack();
        sM.setLocationRelativeTo(null);
        sM.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDueActionPerformed
        // TODO add your handling code here:
        JFrame f = new JFrame();
        String id = txtBookingID4.getText();
        if ( id.trim().length() == 0)
        {
            JOptionPane.showMessageDialog(f,"Improper input format","Error",JOptionPane.WARNING_MESSAGE);
        }

        else
        {
            Session session = factory.openSession();
            Transaction tx = null;
            
            try {
                tx = session.beginTransaction();
                Customerbookings cb = (Customerbookings)session.get(Customerbookings.class, Integer.valueOf(id)); 
                if(cb!=null)
                {
                    if(cb.getStatus().equals("Completed"))
                    {
                        int p = JOptionPane.showConfirmDialog(null, "Would you like to mark the booking as due?","Overdue Booking",JOptionPane.YES_NO_OPTION);
                        if(p==0)
                        {
                            cb.setStatus("Due");
                            session.update(cb);
                            tx.commit();
                            JOptionPane.showMessageDialog(null,"Booking has been marked due");
                            listBookings();
                            listConfirmedBookings();
                            listPendingBookings();
                        }
                    }
                    else
                    {
                        f = new JFrame();  
                        JOptionPane.showMessageDialog(f,"Booking cannot be marked due unless completed","Error",JOptionPane.WARNING_MESSAGE);
                    }
                }
                else{
                    f = new JFrame();  
                    JOptionPane.showMessageDialog(f,"No record found","Error",JOptionPane.WARNING_MESSAGE);
                }
                
            } catch (HibernateException e) {
                if (tx!=null) tx.rollback();
                e.printStackTrace();
            } finally {
                session.close();
            }
        }
    }//GEN-LAST:event_btnDueActionPerformed

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
        // TODO add your handling code here:
        JFrame f = new JFrame();
        String id = txtBookingID4.getText();
        if ( id.trim().length() == 0)
        {
            JOptionPane.showMessageDialog(f,"Improper input format","Error",JOptionPane.WARNING_MESSAGE);
        }

        else
        {
            Session session = factory.openSession();
            Transaction tx = null;
            
            try {
                tx = session.beginTransaction();
                Customerbookings cb = (Customerbookings)session.get(Customerbookings.class, Integer.valueOf(id)); 
                if(cb!=null)
                {
                    if(cb.getStatus().equals("Due"))
                    {
                        int p = JOptionPane.showConfirmDialog(null, "Would you like to mark the booking as completed?","Complete Booking",JOptionPane.YES_NO_OPTION);
                        if(p==0)
                        {
                            cb.setStatus("Completed");
                            session.update(cb);
                            tx.commit();
                            JOptionPane.showMessageDialog(null,"Booking has been marked completed");
                            listBookings();
                            listConfirmedBookings();
                            listPendingBookings();
                        }
                    }
                    else
                    {
                        f = new JFrame();  
                        JOptionPane.showMessageDialog(f,"Booking cannot be marked completed unless due","Error",JOptionPane.WARNING_MESSAGE);
                    }
                }
                else{
                    f = new JFrame();  
                    JOptionPane.showMessageDialog(f,"No record found","Error",JOptionPane.WARNING_MESSAGE);
                }
                
            } catch (HibernateException e) {
                if (tx!=null) tx.rollback();
                e.printStackTrace();
            } finally {
                session.close();
            }
        }
    }//GEN-LAST:event_btnCompleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new booking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnComplete;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnDelete2;
    private javax.swing.JButton btnDue;
    private javax.swing.JButton btnLogout;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblBookingID;
    private javax.swing.JLabel lblBookingID1;
    private javax.swing.JLabel lblBookingID2;
    private javax.swing.JLabel lblBookingID3;
    private javax.swing.JLabel lblBookingID4;
    private javax.swing.JLabel lblCompany;
    private javax.swing.JLabel lblConfirm;
    private javax.swing.JLabel lblDelete;
    private javax.swing.JLabel lblDelete1;
    private javax.swing.JLabel lblDelete2;
    private javax.swing.JLabel lblDue;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPanel panelBookings;
    private javax.swing.JPanel panelConfirmedBookings;
    private javax.swing.JPanel panelPendingBookings;
    private javax.swing.JTabbedPane tabBookings;
    private javax.swing.JTable tblBookings;
    private javax.swing.JTable tblConfirmedBookings;
    private javax.swing.JTable tblPendingBookings;
    private javax.swing.JTextField txtBookingID;
    private javax.swing.JTextField txtBookingID1;
    private javax.swing.JTextField txtBookingID2;
    private javax.swing.JTextField txtBookingID3;
    private javax.swing.JTextField txtBookingID4;
    // End of variables declaration//GEN-END:variables

    public void listBookings()
    {
        Session session = factory.openSession();
        Transaction tx = null;
      
        try {
            tx = session.beginTransaction();
            
            Vector<String> tableHeaders = new Vector<String>();
            Vector tableData = new Vector();
            tableHeaders.add("Booking ID");
            tableHeaders.add("Customer name");
            tableHeaders.add("Car Registration no");
            tableHeaders.add("Make");
            tableHeaders.add("Model");
            tableHeaders.add("Booking Date");
            tableHeaders.add("Time Period");
            tableHeaders.add("Status");

            List<Customerbookings> list = session.createQuery("From Customerbookings c ORDER BY c.status DESC, c.bookingDate DESC").list();
            for(Customerbookings cb : list) {
                Vector<Object> oneRow = new Vector<Object>();
                oneRow.add(cb.getBookingId());
                oneRow.add(cb.getCustomers().getUsername());
                oneRow.add(cb.getCars().getRegistrationNo());
                oneRow.add(cb.getCars().getMake());
                oneRow.add(cb.getCars().getModel());
                oneRow.add(cb.getBookingDate());
                oneRow.add(cb.getTimePeriod()+" days");
                oneRow.add(cb.getStatus());
                tableData.add(oneRow);
            }
            
            tblBookings.setModel(new DefaultTableModel(tableData, tableHeaders));
            
            tx.commit();
         } catch (HibernateException e) {
            if (tx!=null) tx.rollback();
            e.printStackTrace(); 
         } finally {
            session.close(); 
         }
    }
    
    public void listConfirmedBookings()
    {
        Session session = factory.openSession();
        Transaction tx = null;
      
        try {
            tx = session.beginTransaction();
                        
            Vector<String> tableHeaders = new Vector<String>();
            Vector tableData = new Vector();
            tableHeaders.add("Booking ID");
            tableHeaders.add("Customer name");
            tableHeaders.add("Car Registration no");
            tableHeaders.add("Make");
            tableHeaders.add("Model");
            tableHeaders.add("Booking Date");
            tableHeaders.add("Time Period");
            tableHeaders.add("Status");

            String hql = "From Customerbookings c WHERE NOT c.status= :status ORDER BY c.status DESC, c.bookingDate DESC";
            Query query = session.createQuery(hql);
            query.setParameter("status","Pending");
            List<Customerbookings> list = query.list();
            
            for(Customerbookings cb : list) {
                Vector<Object> oneRow = new Vector<Object>();
                oneRow.add(cb.getBookingId());
                oneRow.add(cb.getCustomers().getUsername());
                oneRow.add(cb.getCars().getRegistrationNo());
                oneRow.add(cb.getCars().getMake());
                oneRow.add(cb.getCars().getModel());
                oneRow.add(cb.getBookingDate());
                oneRow.add(cb.getTimePeriod()+" days");
                oneRow.add(cb.getStatus());
                tableData.add(oneRow);
            }
            
            tblConfirmedBookings.setModel(new DefaultTableModel(tableData, tableHeaders));
            
            tx.commit();
         } catch (HibernateException e) {
            if (tx!=null) tx.rollback();
            e.printStackTrace(); 
         } finally {
            session.close(); 
         }
    }
    
    public void listPendingBookings()
    {
        Session session = factory.openSession();
        Transaction tx = null;
      
        try {
            tx = session.beginTransaction();
            
            Vector<String> tableHeaders = new Vector<String>();
            Vector tableData = new Vector();
            tableHeaders.add("Booking ID");
            tableHeaders.add("Customer name");
            tableHeaders.add("Car Registration no");
            tableHeaders.add("Make");
            tableHeaders.add("Model");
            tableHeaders.add("Booking Date");
            tableHeaders.add("Time Period");
            tableHeaders.add("Status");

            String hql = "From Customerbookings c WHERE c.status= :status ORDER BY c.status DESC, c.bookingDate DESC";
            Query query = session.createQuery(hql);
            query.setParameter("status","Pending");
            List<Customerbookings> list = query.list();
            
            for(Customerbookings cb : list) {
                Vector<Object> oneRow = new Vector<Object>();
                oneRow.add(cb.getBookingId());
                oneRow.add(cb.getCustomers().getUsername());
                oneRow.add(cb.getCars().getRegistrationNo());
                oneRow.add(cb.getCars().getMake());
                oneRow.add(cb.getCars().getModel());
                oneRow.add(cb.getBookingDate());
                oneRow.add(cb.getTimePeriod()+" days");
                oneRow.add(cb.getStatus());
                tableData.add(oneRow);
            }
            
            tblPendingBookings.setModel(new DefaultTableModel(tableData, tableHeaders));
            
            tx.commit();
         } catch (HibernateException e) {
            if (tx!=null) tx.rollback();
            e.printStackTrace(); 
         } finally {
            session.close(); 
         }
    }
    
    public static void updateFine()
    {
        Session session = factory.openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            //List employees = session.createQuery("FROM carrental.Staff").list();String hql = "FROM Employee E WHERE E.id = :employee_id";
            String hql = "FROM Customerbookings cb WHERE cb.status = :status";
            Query query = session.createQuery(hql);
            query.setParameter("status","Due");
            List results = query.list();

            for (Iterator iterator = results.iterator(); iterator.hasNext();){
                Customerbookings cb = (Customerbookings) iterator.next();
                Date date = cb.getBookingDate();
                Date date_now = new Date(); 
                long diff = date_now.getTime() - (date.getTime()+(cb.getTimePeriod()-1)*24*60*60*1000);
                int days = (int)TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
                Customers c = (Customers)session.get(Customers.class, cb.getCustomers().getId()); 
                c.setFine(days*500);
                session.update(c);
            }

            tx.commit();
        } catch (HibernateException e) {
            if (tx!=null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
    }
    
    public static void updateBookings()
    {
        Session session = factory.openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            String hql = "FROM Customerbookings cb WHERE cb.status = :status";
            Query query = session.createQuery(hql);
            query.setParameter("status","Ongoing");
            List results = query.list();

            for (Iterator iterator = results.iterator(); iterator.hasNext();){
                Customerbookings cb = (Customerbookings) iterator.next();
                Date date = cb.getBookingDate();
                Date date_now = new Date(); 
                long diff = date_now.getTime() - (date.getTime()+(cb.getTimePeriod()*24*60*60*1000));
                int days = (int)TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
                if(days==0)
                {
                    Customerbookings c = (Customerbookings)session.get(Customerbookings.class, cb.getBookingId()); 
                    c.setStatus("Completed");
                    session.update(c);
                    Cars car = (Cars)session.get(Cars.class, cb.getCars().getRegistrationNo()); 
                    car.setAvailability("Available");
                    session.update(car);
                }
            }

            tx.commit();
        } catch (HibernateException e) {
            if (tx!=null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
    }
}
